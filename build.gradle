// For bnd
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.1.0'
	}
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    //id 'jacoco'
    id 'pmd'
    id 'checkstyle'
}

apply plugin: 'biz.aQute.bnd.builder'

group = 'org.daisy.dotify'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	main {	java { srcDir 'src' }	resources { srcDir 'src' } }
	test {	java { srcDir 'test' }	resources { srcDir 'test' } }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

javadoc {
	options.encoding = 'UTF-8'
	options.source = 8
	options.links('https://docs.oracle.com/javase/8/docs/api/')
}

repositories {
    mavenCentral()
    //mavenLocal()
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.sonatype.org/content/groups/staging" }
}

dependencies {
	compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    compile 'org.liblouis:liblouis-java:4.2.0:standalone'
    testCompileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    testImplementation group: "junit", name: "junit", version: "4.12"
    compile group: "com.googlecode.texhyphj", name: "texhyphj", version: "1.2"
    compile 'org.daisy.bindings:jhyphen:1.0.2'
    compile (group: 'org.daisy.libs', name: 'saxon-he', version: '9.5.1.5') {
        exclude module: 'Saxon-HE'
    }
    runtimeOnly 'com.fasterxml.woodstox:woodstox-core:5.1.0'
    testImplementation ('org.daisy.braille:braille-utils.pef-tools:6.0.0') {
        exclude module: 'Saxon-HE'
    }
    testImplementation "org.mockito:mockito-core:1.10.19"
}

jar {
	manifest {
		attributes(
			'-sources': 'true',
			'Automatic-Module-Name': "$moduleName",
			'Bundle-Name': "$bundleName",
			'Bundle-SymbolicName': "$bundleName",
			'Built-By': System.getProperty("user.name"),
			'Built-On': new Date().format('yyyy-MM-dd'),
			'Repository-Revision': "$repoRevision",
			'Repository-URL': "$repositoryURL",
			'Include-Resource': 'LICENSE, NOTICE'
		)
	}
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
	required { isReleaseVersion }
	sign publishing.publications
}

publishing {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	//enabled = repoRevision.size()==40 && System.getenv("TRAVIS_BUILD_ID")!=null
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			/*
			if (isReleaseVersion) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}*/
			pom {
				name = 'dotify.library'
				packaging = 'jar'
				description = 'Dotify Library'
				url = "$repositoryURL"
				scm {
					connection = "$repositorySCM"
					developerConnection = "$repositorySCM"
					url = "$repositoryURL"
				}
				licenses {
					license {
						name = 'LGPL'
						url = 'http://www.gnu.org/licenses/lgpl.html'
					}
				}
				developers {
                    developer {
                        id = 'joel'
                        name = 'Joel HÃ¥kansson'
                    }
                    developer {
                        id = 'bertfrees'
                        name = 'Bert Frees'
                    }
                    developer {
                        id = 'kalaspuffar'
                        name = 'Daniel Persson'
                    }
                    developer {
                        id = 'paulrambags'
                        name = 'Paul Rambags'
                    }
				}
			}
		}
	}
	repositories {
		maven {
			def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl
			credentials {
				username = sonatypeUsername
				password = sonatypePassword
			}
		}
	}
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("checkstyle.xml")
}
checkstyleMain {
    source = []
//    source = 'src'
}
checkstyleTest {
    source = []
//    source = ['test', 'integrationtest']
}

tasks.withType(Checkstyle) {
    exclude '**/resource-files/**'
}

checkstyleMain.dependsOn javadoc

pmd.ruleSets = [
        // New rule sets:
        //'category/java/bestpractices.xml',
        //'category/java/codestyle.xml',
        //'category/java/design.xml',
        //'category/java/documentation.xml',
        //'category/java/errorprone.xml',
        //'category/java/multithreading.xml',
        //'category/java/performance.xml',
        'category/java/security.xml',

        // Old rule sets (use for now):
        'java-basic',
        'java-braces',
        //'java-clone',
        //'java-codesize',
        //'java-comments',
        //'java-controversial',
        //'java-coupling',
        //'java-design',
        //'java-empty',
        'java-finalizers',
        'java-imports',
        //'java-optimizations',
        //->'java-strictexception',
        //'java-strings',
        //->'java-typeresolution',
        //'java-unnecessary',
        //->'java-unusedcode'
]

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}